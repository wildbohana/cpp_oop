//  C++  //

C++ je hibridni jezik tj. nije čisti objektni program, i kod njega postoje slobodne funkcije.
On omogućava istovremenu upotrebu „običnih“ konstanti i konstantnih objekata.
Java nema ni tih slobodnih funkcija kao ni funkciju main.
Java ima statičke metode koje su po karakteristikama iste kao slobodne funkcije samo što imaju drugačiji naziv.

Svaki objekat poseduje sopstvenu memoriju sastavljenu od drugih objekata (i drugih promenljivih u hibridnim jezicima).
Objekti ne smeju deliti memoriju. Pokazivači npr. utiču na deljenje memorije od strane objekata.

Dodela objekta objektu kao b=a je moguća između objekata iste klase.
Uvedeno je prenošenje promenljivih po referenci koje je slično kao pokazivačima, ali, za razliku od njih, ona se ne dereferencira.
Referenca se vezuje za funkcije i to za prenos promenljivih po adresi.

U C++ interfejsi su .h i .hpp, a realizacioni delovi su .c i .cpp.
Isti modul može da se pojavi na više mesta u programu ali njegova definicija može da se pojavi samo jednom.

Svaka klasa mora imati jedan ili više konstruktora. To je u stvari metoda za kreiranje objekta iz klase tj. instanciranje klase.
Konstruktor nosi ime klase. Svi konstruktori se zovu identično kao i klasa u kojoj se nalaze.
Pri pisanju konstruktora se ne navodi njegov tip jer se podrazumeva da je on isti kao i tip klase.
Zato se kaže da on nema nikakav tip. A rezultat rada konstruktora je stvaranje objekta pa je zato isti tip kao i klasa.
Svaka klasa ima bar dva konstruktora, iako ih mi ne napišemo. Zato se oni zovu ugrađeni konstruktori.
Jedan je konstruktor objekta a drugi konstruktor kopije.
Ugrađeni konstruktor ima ulogu samo u zauzimanju memorije.
Postoji još jedna vrsta konstruktora a to je podrazumevani konstruktor a on nema ni parametre.

Kod argumenata funkcije se, ako postoje podrazumevane vrednosti argumenata, prvo navode oni argumenti koji nemaju podrazumevanu vrednost, pa tek onda oni koji je imaju.
Konstruktor kopije se automatski uključuje prilikom poziva slobodne funkcije.
Pozivanje konstruktora kopije se može izbeći prenosom argumenata po adresi, ali i tada će se on možda upaliti.
Destruktor se karakteriše time što se pre njega ne navodi nikakav tip jer je podrazumevani tip void.
Identifikator destruktora ima specijalan znak ~ ispred imena klase, i nikad nema nikakve parametre.
Svaka klasa ima samo jedan destruktor.
Destruktor je u stanju zaključiti šta treba obrisati samo dok je to u sklopu memorije objekta,
 a u slučaju postojanja dinamičkog člana, na primer liste, to je samo pokazivač na prvi član liste.
Zato smo prinuđeni praviti destruktor gde ćemo mi morati da obezbedimo pražnjenje liste.

friend funkcija je u stvari slobodna funkcija.
Relacija kooperativnosti između slobodne funkcije i klase znači da funkcija ima pristup svim elementima bilo da su oni public ili private
 (osim polju this koje je pokazivač objekta na samog sebe).
Ta slobodna funkcija nije u stvari fizički član te klase već je logički tesno vezana za tu klasu.
Klasa je ta koja proglašava funkciju prijateljskom, a ne funkcija samu sebe.
U C++ se podrazumeva da je sve u klasi private dok eksplicitno ne napišemo suprotno.
Klase mogu da se proglase jedna drugoj prijateljskom kada su klase u istoj biblioteci i kada su međusobno logički povezane.
Za prijateljske funkcije možemo proglasiti i metode jedne klase u drugoj.

Polimorfizam je konteksno zavisno ponašanje. Konteksno zavisno se ponašaju promenljive i objekti, ali i funkcije. 
Klase i tipovi koji iskazuju osobine parametarskog polimorfizma nazivaju se generičke klase i generički tipovi.

Preklapati se mogu i slobodne funkcije kao i metode, a takođe se preklapaju i operatori.
Mehanizmi preklapanja funkcija su jednostavniji nego mehanizmi preklapanja operatora, i takođe preklapanje funkcija je mnogo bitnije za programiranje.

C++ dozvoljava da dve različite metode u dve klase nose isto ime jer kod poziva datih metoda ne može da dođe do zabune jer se tačno vidi na koji se objekat koja funkcija odnosi.
Kada se dve različite metode nalaze u istoj klasi, i tu možemo da razlikujemo koju smo pozvali - po njihovih argumentima.
Zabune može biti samo ukoliko npr. funkcija double f ima jedan parametar sa podrazumevanom vrednošću, pa prilikom poziva ne znamo da li se poziva prva ili druga funkcija.
Ovaj problem se ne da tako lako rešiti, pa je preporuka da se kod funkcija koje se preklapaju ne koriste parametri sa podrazumevanim vrednostima.

Preklapanje operatora nam omogućuje da programiramo dejstvo operatora.
Preklapanje operatora spada po svojoj prirodi i u objektno i u procedurno programiranje. Ono je u svakom programskom jeziku ili ugrađeno ili nikako ne postoji.
Podela klasa po preklopljenim operatorima:
- Metodski orijentisane klase nemaju preklopljenih operatora osim operatora dodele „=“ ili eventualno relacionih operatora „==“ i „!=“.
- Operatorski orijentisane klase su klase koje jednostavno nemaju metoda i one se pretežno sastoje od preklopljenih operatera i friend funkcija.
Preporuka: ako operator menja stanje operanda onda ga preklapamo metodom, a ako ne menja stanje onda je kandidat friend funkcija ali opet se može preklopiti i metodom.
U Javi ne postoji preklapanje operatora. Umesto toga se u help klase u kojoj ne postoji preklopljeni element ubaci da se ne preporučuje korištenje takve dodele ali mi ipak možemo napraviti metodu kopiranja objekata. ??

Kada imamo dinamičke elemente u klasi moramo posebno napisati konstruktor kopije, destruktor kopije i operator dodele.

Svaki objekat ima polje this i ono predstavlja pokazivač objekta na samog sebe.
Ovo polje se može pojavljivati samo u metodama. Unutar metode svi pristupi su kvalifikovani sa this i nekada se mora eksplicitno njemu pristupati.

Kompozicija - dve klase objekata, vlasnici i komponente.
Kompozicija je odnos celina - deo, ali je životni vek dela sadržan u životnom veku celine.
Nasleđivanje predstavlja preuzimanje kompletnog sadržaja neke druge klase uz mogućnost dodavanja članova svih vrsta i modifikacije metoda.
U nasleđivanju je moguća modifikacija metoda. Modifikacija metode se zove redefinisanje.
U C++ je dozvoljeno višestruko nasleđivanje.
Pravilo pridruživanja: potomak može da zameni predak, a obrnuto ne može.

Konstruktor i destruktor se ne nasleđuju, kao i friend funkcije jer to takoreći „prijateljstvo“ određuje sama klasa i u to se niko ne meša.
Verzija metode iz pretka će se pozvati pre nego verzija metode iz potomka.
Virtualne metode - svaka klasa ima svoju V-tabelu.
Verzija metode koja se poziva određena je objektom preko koga se poziva.
U Javi su sve metode virtualne.

Apstraktne metode su metode koje nemaju realizaciju, a to se obezbeđuje tako što se posle metode napiše =0. One moraju biti virtualne.
Klasa koja ima bar jednu apstraktnu metodu nosi naziv apstraktna klasa. Ona ne može da se instancira.

Generička klasa je klasa koja je parametrizovana drugim klasama.
template <class T1,...,class Tn>
Generičke klase mogu biti nasleđene (od strane konkretne kao i od generičke klase).

Havarijski prekid programa: exit (broj) (broj !=0), abort, assert (logički izraz)
Korišćenje rezultata potprograma kao koda uspešnosti: top se pre pozivao sa s.top(), dok ga sada moramo pozivati na primer sa s.top(x) gde je x promenljiva preko koje vraćamo rezultat
Mehanizam rukovanja izuzecima: izuzetak je namerno izazvan događaj čija je svrha predupređivanje otkaza i koji ostavlja program u zatečenom stanju
Izuzetak u sebi objedinjava prethodne dve vrste rukovanja greškama.
Reakciju možemo da ugradimo u klasu. Kada su neke klase izvedene, kod rukovaoca, rukovaoc potomkom mora da se nađe pre rukovaoca pretka.



//  Java  //

Java nema destruktore. ( Jesu oni retardirani ?? ) delete() ne postoji.
Java je čist objektni jezik, dok je C++ hibridni jezik.
Objektima se u Javi rukuje preko reference koja nema mnogo dodira sa referencom u C++ već je bliža njegovim pokazivačima.
Pošto je Java čist objektni jezik, izvedenih tipova više nema već su svi oni klase.
Ne postoji naredba typedef, kao ni mogućnost preklapanja operatora. Nema predprocesora, nema ni slobodnih funkcija. Višestruko nasleđivanje ne postoji.
Ne postoje ni generične klase.
Metode mogu da vraćaju reference.

Virtualna memorija je podeljena na stek i hip. Sve skalarne promenljive nalaze se na steku, pa shodno tome i sve reference su na steku. Svi objekti se nalaze na hipu.
Bazni tipovi u Javi: boolean, celobrojni tipovi (int, long, short, byte), realni tipovi (double, float), znakovni tip (char).
Referenca u Javi je adresa. Promenljive se pojavljuju u dva slučaja: ili kao polje u klasi ili kao lokalna promenljiva.
Java nema biblioteke slobodnih funkcija jer je sve u klasama. Sve su to metode koje se pozivaju preko klase.

Logički tip je boolean i on je nekonvertibilan.
Typecast je primenljiv na reference i pojavljuje se kod nasleđivanja.
Pošto je u Javi sve klasa, tako su i nizovi klase.
Niz se nalazi na hipu. Prvi indeks u nizu u Javi je 0 (kao i u C++).
String se u C-u realizuje kao specijalni niz. U javi je string klasa.
StringBuffer klasa nam dozvoljava da imamo string koji je promenljive dužine.

Naredbe goto (skok) nema nikako.
Break postoji i najviše se koristi u switch ili unutar nekog ciklusa i izaziva njegov momentalni prekid.
Pošto nema goto, kada želimo da iskočimo iz nekog ugneždenog ciklusa, sada koristimo break koji je ojačan.
Postoji i continue i ona prelazi na sledeću iteraciju ciklusa.

Kada su u pitanju polja, tada će svako polje biti inicijalizovano. U Javi ne postoji polje koje nema stanje (početnu vrednost).
Postoje reference na nizove u Javi.
Polje this postoji i u Javi ali je ovde ono adresa pa nema dereferenciranja.
U Javi nema destruktora jer se curenje memorije ovde dozvoljava.
U Javi postoji background proces koji se zove garbage collector. On se uključuje i sve objekte na koje ne postoji referenca uništi. 
U jednoj datoteci može da se smesti više klasa, ali je samo jedna public.
Svaka klasa se instancira preko new. 

Ukoliko imamo dva objekta recimo iste klase (obj1 i obj2), i napišemo obj1=obj2, mi smo u stvari napravili izjednačavanje referenci.
Isti slučaj je i za obj1==obj2 - ovde se upoređuju reference, a ne sadržaji objekata.

U Javi nema globalnih promenljivih, već je sve u sklopu klase.
Kloniranje (2 načina):  r1=(Rectangle)r2.clone()  |  r1=new Rectangle (r2);
Relacije jednakosti:  r.equals(s);
Paketi su skupovi klasa.

Private delu pristupaju metode matične klase.
Sledeći nivo nema posebnu reč i zovemo ga default ili friendly. Onome što je kontrolisano ovim nivoom mogu pristupiti metode iz sopstvene klase,
 kao i metode iz klasa istoga paketa.
Protected nivou imaju pristup klase iz toga paketa, kao i izvedene klase.
Public delu pristupaju sve klase. Default je jači kandidat od private kada treba nešto zatvoriti.

Nasleđivanje: modifikator class B extends A {}
Višestrukog nasleđivanja nema i to se rešava upotrebom interfejsa. (apstraktna klasa u C++ <=> interfejs u Javi)
Modifikator final može da se koristi i za klase i za metode, i on u tom slučaju govori da ta klasa ne može da se nasledi, tj. da ta metoda ne može da se redefiniše.
Svaka klasa pored polja this (reference na samu sebe), ima i polje super i to je polje preko koga se može pristupiti verzijama iz bazne klase.
Zbog jedinstvene hijerarhije klasa, svaka nova klasa nasleđuje klasu Object, bilo direktno ili indirektno, tj. svaka klasa osim Object je izvedena klasa.
Preklapanje operatora u Javi ne postoji, ali preklapanje funkcija postoji.
Typecast postoji i u Javi i najčešće se pojavljuje nad referencom (kod nasleđivanja).
Potomak može da se dodeli pretku, a obrnuto nije moguće.

U Javi, apstraktna klasa je klasa koja se ne može instancirati. Ona se opisuje modifikatorom abstract tj. neće moći da se instancira.
U Javi, apstraktna klasa može a i ne mora da sadrži apstraktne metode.
Interfejsi nisu klase. Po ponašanju oni bi se skoro pa poklopili sa apstraktnom klasom u C++.
Interfejs se može implementirati u više klasa, a ne samo u jednoj. Takođe, i interfejs može da bude nasleđen, ali samo od strane drugog interfejsa. 
Interfejs ne može da se instancira, ali može da se definiše referenca na interfejs.

Mehanizmi prevencije otkaza u Javi su veoma slični prevenciji otkaza u C++.
- Havarijski prekid programa: System.exit(n)
- Korišćenje rezultata metode za indikaciju uspešnosti: ništa novo
- Rukovanje izuzecima: izuzeci su u Javi isključivo objekti, generisanje izuzetaka se vrši naredbom throw, a prihvatanje sa try, 
  objekat mora deklarisati izuzetak osim ako on nije RuntimeException
Postoji još jedan deo, tj. posle catch naredbi možemo da stavimo finaly. Taj blok ima definicionu metodu koja će sigurno biti izvršena. Sve što mora da se izvrši stoji u finaly.

U toku izvršavanja programa mi možemo da vidimo kojoj klasi pristupa ovaj objekat. To se radi preko metode getClass().
U Javi postoje generičke klase, mada one imaju mnogo uže mogućnosti od Template iz C++.
