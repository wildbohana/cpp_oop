Već smo rekli da entiteti poseduju različite osobine i međusobno stoje u nekim odnosima
Metodom apstrakcije se odnos između pojedinačnih entiteta može postaviti na viši nivo, tj. nivo klasa entiteta
Jedan od odnosa između entiteta može biti i "poseduje"
U tom slučaju, svaki entitet iz jedne klase (celine) poseduje odgovarajući entitet iz druge klase

U fazi implementacije, klasa koja predstavlja celinu naziva se vlasnik, a klasa koja odgovara delu celine se naziva komponenta
Kompozicija je takva veza klasa za koju važi da vlasnik "poseduje" komponentu
Pri tome, komponenta ne može postojati pre kreiranja i posle uništenja vlasnika
Drugim rečima, životni vek komponente je sadržan u životnom veku vlasnika

Objekat-član je komponenta koja ima jednog vlasnika

Ako svaka instanca klase A poseduje bar jednu instancu klase B, pri čemu stvaranje i uništavanje date instance klase B zavisi od stvaranja i uništavanja instance klase A, onda se kaže da između klase A i klase B postoji veza kompozicije

Razlikujemo:
	- konstruktor bez parametara  (Krug() {r=1;})
	- konstruktor sa parametrima  (Krug(double rr) {r=rr;})
	- konstruktor sa parametrima koji ima podrazumevane vrednosti  (Krug(double rr=1) {r=rr;})

Broj M_PI je broj pi i nalazi se u standardnom zaglavlju math.h

U klasi koja je objekat-vlasnik koristimo konstruktor inicijalizator koji ima posebnu sintaksnu formu gde posle znaka : sledi segment za inicijalizaciju
	Valjak(double rr=1, double hh=1) : B(rr), M(2*rr*M_PI, hh) {}
